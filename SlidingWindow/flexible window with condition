Note:
1) to find number of subarray sum = k for that we can find the number of (subarray with sum at most k) - (number of subarray with sum k-1)
2) to find the number of subarray we do j-i+1
similar as binary subarray problem

1248. Count Number of Nice Subarrays
Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.

Return the number of nice sub-arrays.

 

Example 1:

Input: nums = [1,1,2,1,1], k = 3
Output: 2
Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].

class Solution {
    public int atMost(int k, int[] nums){
        int left = 0;
        int right = 0;
        int sum = 0;
        int count = 0;
        while(right < nums.length){
            sum += nums[right]%2;
            while(left < nums.length && sum > k){
                sum -= nums[left]%2;
                left++;
            }
            count += right-left+1;
            right++;
        }
        return count;
    }
    public int numberOfSubarrays(int[] nums, int k) {
        return atMost(k, nums) - atMost(k-1, nums);
    }
}



1438. Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit
Example 1:

Input: nums = [8,2,4,7], limit = 4
Output: 2 
Explanation: All subarrays are: 
[8] with maximum absolute diff |8-8| = 0 <= 4.
[8,2] with maximum absolute diff |8-2| = 6 > 4. 
[8,2,4] with maximum absolute diff |8-2| = 6 > 4.
[8,2,4,7] with maximum absolute diff |8-2| = 6 > 4.
[2] with maximum absolute diff |2-2| = 0 <= 4.
[2,4] with maximum absolute diff |2-4| = 2 <= 4.
[2,4,7] with maximum absolute diff |2-7| = 5 > 4.
[4] with maximum absolute diff |4-4| = 0 <= 4.
[4,7] with maximum absolute diff |4-7| = 3 <= 4.
[7] with maximum absolute diff |7-7| = 0 <= 4. 
Therefore, the size of the longest subarray is 2


code:
class Solution {
    public int longestSubarray(int[] nums, int limit) {
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        int i = 0;
        int length = Integer.MIN_VALUE;
        while(i < nums.length){
            min = Math.min(nums[i], min);
            max = Math.max(nums[i], max);
            int j = i;
            while(j < nums.length && (max-min) <= limit){
                j++;
                if(j < nums.length){
                    min = Math.min(nums[j], min);
                    max = Math.max(nums[j], max);
                }
            }
            length = Math.max((j-i), length);
            if(j == nums.length){
                return length;
            }
            if(min == nums[i]){
                min = Integer.MAX_VALUE;
            }
            if(max == nums[i]){
                max = Integer.MIN_VALUE;
            }
            i++;
        }
        return length;
    }
}


2461. Maximum Sum of Distinct Subarrays With Length K

Input: nums = [1,5,4,2,9,9,9], k = 3
Output: 15
Explanation: The subarrays of nums with length 3 are:
- [1,5,4] which meets the requirements and has a sum of 10.
- [5,4,2] which meets the requirements and has a sum of 11.
- [4,2,9] which meets the requirements and has a sum of 15.
- [2,9,9] which does not meet the requirements because the element 9 is repeated.
- [9,9,9] which does not meet the requirements because the element 9 is repeated.
We return 15 because it is the maximum subarray sum of all the subarrays that meet the conditions

code:
class Solution {
    public long maximumSubarraySum(int[] nums, int k) {
        int i = 0;
        long sum = 0L;
        long maxSum = 0L;
        Map<Integer, Integer> hm = new HashMap<>();
        int j = 0;
        while(j < nums.length){
            hm.put(nums[j], hm.getOrDefault(nums[j],0)+1);
            sum += (long)nums[j];
            if(j-i+1 == k){
                if(hm.size() == k){
                    maxSum = Math.max(maxSum, sum);
                }
                sum -= nums[i];
                hm.put(nums[i], hm.get(nums[i])-1);
                if(hm.get(nums[i]) == 0){
                    hm.remove(nums[i]);
                }
                i++;
            }
            j++;
        }
        return maxSum;
    }
}
