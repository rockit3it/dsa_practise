Note:
1) to find number of subarray sum = k for that we can find the number of (subarray with sum at most k) - (number of subarray with sum k-1)
2) to find the number of subarray we do j-i+1
similar as binary subarray problem

1248. Count Number of Nice Subarrays
Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.

Return the number of nice sub-arrays.

 

Example 1:

Input: nums = [1,1,2,1,1], k = 3
Output: 2
Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].

class Solution {
    public int atMost(int k, int[] nums){
        int left = 0;
        int right = 0;
        int sum = 0;
        int count = 0;
        while(right < nums.length){
            sum += nums[right]%2;
            while(left < nums.length && sum > k){
                sum -= nums[left]%2;
                left++;
            }
            count += right-left+1;
            right++;
        }
        return count;
    }
    public int numberOfSubarrays(int[] nums, int k) {
        return atMost(k, nums) - atMost(k-1, nums);
    }
}
