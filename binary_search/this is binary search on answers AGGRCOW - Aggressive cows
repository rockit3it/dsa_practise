AGGRCOW - Aggressive cows
#binary-search
Farmer John has built a new long barn, with N (2 <= N <= 100,000) stalls. The stalls are located along a straight line at positions x1 ... xN (0 <= xi <= 1,000,000,000).

His C (2 <= C <= N) cows don't like this barn layout and become aggressive towards each other once put into a stall. To prevent the cows from hurting each other, FJ wants to assign the cows to the stalls, such that the minimum distance between any two of them is as large as possible. What is the largest minimum distance?
Input
t â€“ the number of test cases, then t test cases follows.
* Line 1: Two space-separated integers: N and C
* Lines 2..N+1: Line i+1 contains an integer stall location, xi
Output
For each test case output one integer: the largest minimum distance.
Example
Input:

1
5 3
1
2
8
4
9
Output:

3


Approach:
in this case we have to try for each distances from 1 to max value we have to try for binary search
import java.util.*;
always prefer to sort the array
Code:

public class Codeforces {
    public static boolean isValid(int arr[], int mid, int c){
        int cows = 1;
        int prev = arr[0];
        for(int i = 1; i < arr.length; i++){
            if(arr[i] - prev >= mid){
                prev = arr[i];
                cows++;
            }
            if(cows >= c){
                return true;
            }
        }
        return false;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while(t-- > 0){
            int n = sc.nextInt();
            int c = sc.nextInt();
            int arr[] = new int[n];
            for(int i = 0; i < n; i++){
                arr[i] = sc.nextInt();
            }
            Arrays.sort(arr);
            int start = 1;
            int ans = 0;
            int end = Arrays.stream(arr).max().getAsInt();
            while (start <= end){
                int mid = start + (end-start)/2;
                if(isValid(arr, mid, c)){
                    start = mid+1;
                    ans = mid;
                }
                else{
                    end = mid-1;
                }
            }
            System.out.println(ans);
        }
    }
}
