basic operations
1)right shift
4>>1
4/2^1


2) to clear the right most set bit
n = n&(n-1)
3) to get clear the 3rd bit from left
10111 --> 10011
1<<3
n = n &~(1<<3)

4) to set 4th bit
10111 --> 11111

1 << 3
n = n | 1 << 3

5) for swapping of two numbers a = 5 b = 6 -> a = 6, b = 5
a = a^b
a = 5^6
b = a^b = 5^6^5 = 6
a = a^b = 5^6^5 = 6;

6)
to check the ith bit is set or not 
we can directly shit the number by i right shift

7)Count total set bits
N = 4
ans = 5
001
010
011
100
= 5
 observation
Decimal	E	D	C	B	A
0	0	0	0	0	0
1	0	0	0	0	1
2	0	0	0	1	0
3	0	0	0	1	1
4	0	0	1	0	0
5	0	0	1	0	1
6	0	0	1	1	0
7	0	0	1	1	1
8	0	1	0	0	0
9	0	1	0	0	1
10	0	1	0	1	0
11	0	1	0	1	1
12	0	1	1	0	0
13	0	1	1	0	1
14	0	1	1	1	0
15	0	1	1	1	1
16	1	0	0	0	0

for first column for sample size 2 there is one set bit so if we have number 4 take it as 5 we will observe the pattern from 0000 so number is 5/2 = 4 in integer it is 
not completely divisible by 2 so we take modulo of 5%2 = 1 it is not greater that pattern size/2 so we not take if opposite caase is their we take it
code:
class Solution{
    
    //Function to return sum of count of set bits in the integers from 1 to n.
    public static int countSetBits(int n){
        // Your code here
        int patSize = 2;
        int sbit = 1;
        int count = 0;
        int k = 0;
        n++;
        for(int j = 1; j <= n; j = j*2){
            k = n/patSize;
            k *= sbit;
            // System.out.println(k);
            count += k;
            k = n%patSize;
            if(k > patSize/2){
                count = count + (k-patSize/2);
            }
            sbit = sbit * 2;
            patSize = 2*patSize;
        }
        return count;
    }
}



