1011. Capacity To Ship Packages Within D Days
A conveyor belt has packages that must be shipped from one port to another within days days.

The ith package on the conveyor belt has a weight of weights[i]. Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than the maximum weight capacity of the ship.

Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within days days.

 

Example 1:

Input: weights = [1,2,3,4,5,6,7,8,9,10], days = 5
Output: 15
Explanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:
1st day: 1, 2, 3, 4, 5
2nd day: 6, 7
3rd day: 8
4th day: 9
5th day: 10

Note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.
Example 2:
Approach:
to deliver the order for the convenince lets deliver the whole order in single day for that we needed the capacity is equal to the sum of whole array 
form this we can make a observation for one day means in one partioning of array max capacity required is the sum of whole array but we have days = n consider to deliver 
in  that time frame only we can save out some money of buying high capacity of carrier for that we have to decide the capacity using which we can deliver the things
so our range will be maximum in the array to the sum of array values that is capacity for the carrier 
CODE:
class Solution {
    public int shipWithinDays(int[] weights, int days) {
        int n = weights.length;
        int start = Arrays.stream(weights).max().getAsInt();
        int end = 0;
        int ans = 0;
        for(int i = 0; i < weights.length; i++){
            end += weights[i];
        } 
        while(start <= end){
            int mid = start+(end-start)/2;
            int count = 0;
            int sum = 0;
            for(int i = 0; i < n; i++){
                sum += weights[i];
                if(sum > mid){
                    count++;
                    sum = weights[i];
                }
                if(i == n-1 && (sum == weights[i] || sum <= mid)){
                    count++;
                }
            }
            if(count <= days){
                end = mid-1;
                ans = mid;
            }
            else{
                start = mid+1;
            }
        }
        return ans;
    }
}
